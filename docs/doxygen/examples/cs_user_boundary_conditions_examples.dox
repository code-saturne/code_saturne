/*============================================================================
 * code_saturne documentation page
 *============================================================================*/

/*
  This file is part of code_saturne, a general-purpose CFD tool.

  Copyright (C) 1998-2024 EDF S.A.

  This program is free software; you can redistribute it and/or modify it under
  the terms of the GNU General Public License as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any later
  version.

  This program is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  details.

  You should have received a copy of the GNU General Public License along with
  this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
  Street, Fifth Floor, Boston, MA 02110-1301, USA.
*/

/*-----------------------------------------------------------------------------*/

/*!
  \page cs_user_boundary_conditions_examples User-defined functions for boundary conditions

  \section intro_bc Introduction

  This page provides several examples of code blocks that may be used
  to define boundary conditions in \ref cs_user_boundary_conditions_setup
  or \ref cs_user_boundary_conditions.

  \section cs_user_bc_examples Boundary condition definition examples
  Here is the list of examples dedicated to different physics:

  - \subpage base_examples
  - \subpage note_book
  - \subpage time_table
  - \subpage base_examples_legacy
  - \subpage channel_inlet_mapped
  - \subpage channel_inlet_auto
  - \subpage advanced_examples
  - \subpage atmospheric_examples
  - \subpage compressible_examples
  - \subpage electric_arcs_examples
  - \subpage electric_arcs_ieljou_3_or_4_examples
  - \subpage fuel_examples
  - \subpage gas_3ptchem_examples
  - \subpage gas_ebu_examples
  - \subpage gas_libby_williams_examples
  - \subpage pulverized_coal_bcs
  - \subpage medcoupling_remapper_2d
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page base_examples Basic examples

  The preferred method for defining boundary conditions (besides using the GUI)
  is to assign zone-based definitions in the \ref cs_user_boundary_conditions_setup
  function (\ref cs_user_boundary_conditions.c).

  As an alternative, the same definitions may be defined in
  \ref cs_user_finalize_setup_wrapper (\ref cs_user_parameters), which is called
  immediately after \ref cs_user_boundary_conditions_setup. Choosing one or the
  other should be based on the best balance for reability and maintainability,

  \section base_xdef_const Simple constant-valued boundary conditions.

  The following examples illustrate how different types of boundary conditions can
  be assigned to given variables at specified zones.
  In each case, an input array is provided. Values are copied internally, so the
  array does not need to continue existing after the boundary condition is defined.

  \subsection base_xdef_const_vel Constant value or flux

  Imposed values (Dirichlet conditions) can be defined using an array of the same
  dimension as the variable, as shown here for a velocity vector (1.5, 0, 0)
  at a zone named "inlet":

  \snippet cs_user_boundary_conditions.c inlet_vel_value

  Simple Neuman conditions can be defined in a simular manner, replacing
  \ref CS_PARAM_BC_DIRICHLET with \ref CS_PARAM_BC_NEUMANN.

  \subsection base_xdef_const_robin Constant exchange coefficient

  For exchange-condition-type boundary conditions, where a given exchange coefficient
  and exterior value are provided, a Robin boundary condition can be used.
  In this case, a boundary condition of the form:
  \f$ K du/dn + alpha*(u - u0) = g \f$
  can be used by providing the values \f$ (alpha, u0, g)\f$, where \f$ alpha \f$
  is the exchange coefficient mulitiplied by -1 (contribution from boundary to
  domain sign convention), and \f$ u0 \f$ is the external value.

  In the following example, and exchange coefficient of value 10.5 and an external
  value of 0.1 is appplied to a scalar (named "scalar1") on a zone named
  "exchanger_wall":

  \snippet cs_user_boundary_conditions.c wall_scalar_exchange_const

  \section base_xdef_callback Common boundary conditions types with local values.

  The following examples illustrate how slightly more advanced boundary conditions
  can be assigned with user-defined callback functions. Here, we use "static"
  (i.e. local) functions that must be defined in the same file
  (i.e. \ref cs_user_boundary_conditions.c) prior to being referenced in
  \ref cs_user_boundary_conditions_setup. It is of course possible to use functions
  with global linkage, which can be defined in any file, as log as the matching
  function prototypes are defined or included at the calling point.

  Note the as many callback functions as required may be used, and can be named
  in any manner chosen by the user (though of course using a consistent naming scheme
  is recommended for readability and maintainability).

  \subsection base_xdef_analytic Analytic functions

  Analytic functions of type \ref cs_analytic_func_t are one of several callback
  function types that may be used to define boundary conditions. For each zone,
  they are called for a set of quadrature points at which values are evaluated.
  For legacy schemes, the associated quadrature points are the face centers of
  the selected zone. For CDO-based solvers, the set of points depends on the
  quadrature type.

  In this example, analytic functions are used to define the velocity and a scalar.
  Here, the following functions are first defined, for the velocity:

  \snippet cs_user_boundary_conditions.c inlet_vel_analytic_func

  And for the scalar:

  \snippet cs_user_boundary_conditions.c inlet_scalar_analytic_func

  They are then associated to the matching zone in \ref cs_user_boundary_conditions_setup :

  \snippet cs_user_boundary_conditions.c inlet_vel_analytic

  and

  \snippet cs_user_boundary_conditions.c inlet_scalar_analytic

  \subsection base_xdef_dof Boundary-face-based functions.

  Degree-of-freedom-based callbacks of type \ref cs_dof_func_t can be used
  to define boundary conditions at known locations, such as boundary faces for
  a given zone, independently of the quadrature actually used. For legacy schemes,
  boundary faces represent the natural boundary value locations, so using analytic
  or dof-base functions is equivalent (though point coordinates are not provided
  in dof-function arguments, so must be accessed through the mesh quantities if
  needed). For CDO schemes, values are automatically interpolated from the provided
  boundary face centers to the actual quadrature points.

  In the following example, a function based on boundary face values of type
  \ref cs_dof_func_t is used to define a Robin boundary condition based on
  an exchange coefficient and external value.
  As Robin conditions are expressed in the form:
  \f$ K du/dn + alpha*(u - u0) = g \f$
  for each location pont, a tuple of values (alpha, u0, g) is provided
  with interleaved storage. This can be seen in the definition of the
  associated function:

  \snippet cs_user_boundary_conditions.c wall_exchange_dof_func

  As usual, the function is then used as a callback for for Robin condition:

  \snippet cs_user_boundary_conditions.c wall_scalar_exchange_dof

  \subsection base_xdef_dof_const Scaling by zone surface.

  To define even a constant boundary value using a scaling variable not yet known
  at setup time, an appropriate callback function must be used.
  This is the case, for division by a zone's surface, which is unknown
  when calling \ref cs_user_boundary_conditions_setup (where the mesh
  has not yet been read or built).

  As an example, to define a unit flux such that the total flux over a zone
  has value 1, we can simply divide it by a zone's measure, such as in the following
  function for a zone named "wall_top":

  \snippet cs_user_boundary_conditions.c wall_top_flux_dof_func

  which we associate to the given zone and variable:

  \snippet cs_user_boundary_conditions.c wall_top_flux_dof

  A similar definition is done for zone "wall_side", with a slightly improved
  function definition:

  \snippet cs_user_boundary_conditions.c wall_side_flux_dof_func

  This function is similar to the one used for "wall_top", but assumes the associated
  input pointer is a pointer to the associated zone, which can thus be obtained
  directly using a pointer cast.

  In this case, the matching zone pointer must be passed as the associated input
  when assigning the condition:

  \snippet cs_user_boundary_conditions.c wall_side_flux_dof

  Note that a structure passed as a callback input must still point to valid
  data when the callback is executed. This is the case for zone pointers,
  even for time-varying zones (whose data may change, but base structure pointer
  is unvarying).
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page note_book Boundary conditions using notebook

  Get a user parameter defined in the GUI notebook.

  To access a notebook-defined variable when defining boundary conditions,
  a callback function of the type  of type \ref cs_dof_func_t can be defined,
  such as the following (for a notebook variable named "t_inlet"):

  \snippet cs_user_boundary_conditions-notebook.c notebook_dof_func

  Note that accessing the notebook value in the function above is done through
  the call to \ref cs_notebook_parameter_value_by_name.

  The callback function can then be assigned to the zone named "inlet"
  for variable "scalar1" in the usual way
  (in \ref cs_user_boundary_conditions_setup):

  \snippet cs_user_boundary_conditions-notebook.c notebook_dof_inlet
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page time_table Boundary conditions using time table

  Compute a time dependent parameter value from a time table defined by the
  user.

  To access a time table defined variable when defining boundary conditions,
  a callback function of the type  of type \ref cs_dof_func_t can be defined,
  such as the following (for a time table named "inlet_temperature"):

  \snippet cs_user_boundary_conditions-time_table.c time_table_dof_func

  Note that accessing the time table value in the function above is done
  through the call to \ref cs_time_table_compute_time_value.

  The callback function can then be assigned to the zone named "inlet"
  for variable "scalar1" in the usual way
  (in \ref cs_user_boundary_conditions_setup):

  \snippet cs_user_boundary_conditions-time_table.c time_table_dof_inlet
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page base_examples_legacy Basic examples (legacy method)

  The preferred method for defining boundary conditions (besides using the GUI)
  is to assign zone-based definitions in the \ref cs_user_boundary_conditions_setup
  function (\ref cs_user_boundary_conditions.c).

  As an alternative, the same definitions may be defined in
  \ref cs_user_finalize_setup_wrapper (\ref cs_user_parameters), which is called
  immediately after \ref cs_user_boundary_conditions_setup. Choosing one or the
  other should be based on the best balance for reability and maintainability,

  \section base_init_ex Initialization

  The following initialization block needs to be added for the following examples:

  \snippet cs_user_boundary_conditions-base.c init

  \section base_body_bc Body

  In the body, we may define several boundary conditions. Here are a few examples.

  \section base_example_1_bc Inlet example with hydraulic diameter

  Assign an inlet to boundary faces of in zone 'inlet_1'.

  \warning the <, <=, >, and >= operators may only be used with variables x, y, and z.
  This syntax is not a full equation interpreter, so formulas involving x, y, or z
  are not allowed.

  Set a a Dirichlet value on the three components of \f$ \vect{u} \f$
  on the faces with the selection criterion '2 and x < 0.01' and set a Dirichlet
  to all the scalars \f$ \varia \f$.

  Turbulence example computed using equations valid for a pipe.

  We will be careful to specify a hydraulic diameter adapted
  to the current inlet.

  We will also be careful if necessary to use a more precise
  formula for the dynamic viscosity use in the calculation of
  the Reynolds number (especially if it is variable, it may be
  useful to take the law from \ref cs_user_physical_properties.
  Here, we use by default the 'viscl0" value.

  Regarding the density, we have access to its value at boundary
  faces (b_roh) so this value is the one used here (specifically,
  it is consistent with the processing in \ref cs_user_physical_properties,
  in case of variable density).

  \snippet cs_user_boundary_conditions-base.c example_1

  \section base_example_2_bc Inlet example with turbulence intensity

  Assign an inlet to boundary faces of zone 'inlet_2'.

  Set a a Dirichlet value on the three components of \f$ \vect{u} \f$
  on the faces with the selection criterion '3' and set a Dirichlet
  to all the scalars \f$ \varia \f$.

  Turbulence example computed using turbulence intensity data.

  We will be careful to specify a hydraulic diameter adapted
  to the current inlet.

  Calculation of \f$ k \f$ and \f$ \varepsilon \f$
  at the inlet (xkent and xeent) using
  the turbulence intensity and standard laws for a circular pipe
  (their initialization is not needed here but is good practice)

  \snippet cs_user_boundary_conditions-base.c example_2

  \section base_example_3_bc Assign an outlet to boundary faces of zone 'outlet'

  Outlet:
  - zero flux for velocity and temperature, prescribed pressure
  - Note that the pressure will be set to P0 at the first
  - free outlet face (CS_OUTLET)

  \snippet cs_user_boundary_conditions-base.c example_3

  \section base_example_4_bc Wall example

  Assign a wall to boundary faces of zone '5'.

  Wall:
  - zero flow (zero flux for pressure)
  - friction for velocities (+ turbulent variables)
  - zero flux for scalars

  \snippet cs_user_boundary_conditions-base.c example_4

  \section base_example_5_bc Rough wall example

  Assign a rough wall to boundary faces of zone '7'.

  Wall:
  - zero flow (zero flux for pressure)
  - rough friction for velocities (+ turbulent variables)
  - zero flux for scalars

  \snippet cs_user_boundary_conditions-base.c example_5

  \section base_example_6_bc Symmetry example

  Assign a symmetry condition to boundary faces of zone '4'

  \snippet cs_user_boundary_conditions-base.c example_6
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page channel_inlet_mapped Infinite channel inlet

  A method of defining an inlet condition which converges towards an infinite
  channel profile is based simply on feedback from values computed downstream
  from the inlet.

  Here, we define an inlet boundary condition for a very long channel or duct
  with a section matching the boundary faces of zone 'INLET'.

  \section channel_inlet_mapped_init_bc Initialization and finalization

  Initialization and finalization is similar to that of the base examples,
  with the addition of the mapping object, described in a specific section
  hereafter

  \section channel_inlet_mapped_example_1_base Base definition

  \warning We assume other boundary conditions are defined before this one
  (ideally, using the GUI).

  The base definition given here ensures initialization of a (flat) inlet profile
  with the required mean velocity.

  \note We may skip the addition of the following block in the user
  subroutine if we define an equivalent inlet condition using the GUI,
  which will ensure the appropriate initialization before entering the
  user function.

  \snippet cs_user_boundary_conditions-mapped_inlet.c example_1_base

  \section channel_inlet_mapped_example_1_map_init Mapping definition

  To define the appropriate mapping object, the
  \ref cs_boundary_conditions_map function is used. In this example,
   coordinates of the selected inlet face
  are shifted by a constant distance (5.95 meters along the \em x axis),
  and mapped to the corresponding mesh cells. Here, all cells are selected
  as point location candidates, but optionally, a restricted list of cells
  may be provided, which may accelerate location (or ensure it is done on a
  selected subset). In most cases, as in this example, a constant coordinate
  shift is used for all inlet points, but it is possible to define a
  specific shift for each face.

  \snippet cs_user_boundary_conditions-mapped_inlet.c example_1_map_init

  In general, when defining a pseudo-periodic boundary condition, it is assumed
  that the mesh is not moving, so the mapping may be defined once and for
  all. Hence the test on \c nt_cur and \c nt_prev and the save attribute
  for the inlet_1 pointer.

  \section channel_inlet_mapped_example_1_map_apply Applying the map

  At all time steps after the first (possibly even the first if the flow
  at the mapping locations is initialized to nonzero values), the values at
  points mapped to inlet face centers are applied to the field->bc_coeffs->rcodcl1
  values of the corresponding faces, using the \ref cs_boundary_conditions_mapped_set
  function. Optionally, a normalization by be applied,
  ensuring the mean values initially defined are preserved. Normalization
  is recommended for the velocity, and possibly scalars, but not for
  turbulent quantities, which should adapt to the velocity.

  \snippet cs_user_boundary_conditions-mapped_inlet.c example_1_map_apply

  \section channel_inlet_mapped_example_1_map_clean Finalization

  At the end of the computation, it is good practice to free the mapping
  structure:

  \snippet cs_user_boundary_conditions-mapped_inlet.c example_1_map_free
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page channel_inlet_auto Infinite channel inlet with near-inlet feedback

  A second method of defining an inlet condition which converges towards
  an infinite channel profile is based simply on feedback from values
  computed at inlet cell centers (combining the inlet boundary conditions
  and the effect of wall friction on the inlet walls). It assumes the mesh
  is very regular and orthogonal, at least on the first two inlet cell layers
  (using a gradient correction in the case of a less regular mesh might work,
  but has never been tested.

  \section channel_inlet_auto_init_bc Initialization and finalization

  Initialization and finalization is similar to that of the base examples

  \snippet cs_user_boundary_conditions-auto_inlet_profile.c init

  \section channel_inlet_auto_example_1_bc Body

  Here, we define an inlet boundary condition for a very long channel or duct
  with a section matching the boundary faces of zone 'INLET'.

  We fix a mean inlet velocity, and use a feedback loop assuming a fixed-point type
  behavior will allow us to reach a state matching that of a very long inlet channel.

  \warning We assume other boundary conditions are defined before this one
  (ideally, using the GUI).

  \warning We also assume that the mesh is orthogonal at the inlet, and we are using a RANS
  (not LES) computation.
  to the current inlet.

  For EBRSM of V2f models, to avoid laminarization at the inlet, the initial velocity
  (at the first time step) is divided by 10 on inlet faces adjacent to the boundary, so
  as to ensure a velocity gradient and turbulent production. Otherwise, the initialization
  may fail.

  \snippet cs_user_boundary_conditions-auto_inlet_profile.c example_1
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page advanced_examples Advanced examples

  \section advanced_loc_var_be Local variables common to following examples

  The following declaration and initialization block is required used for
  the examples of this section:

  \snippet cs_user_boundary_conditions-advanced.c loc_var_dec

  \section base_init_be Initialization and finalization

  Initialization and finalization is similar to that of the base examples

  \section advanced_ex_1 Example 1

  Example of specific boundary conditions fully defined by the user,
  on the basis of wall conditions selection
  (mass flow computation, specific logging, ...)

  ²We prescribe for zone 'wall_s' a wall, with in addition:
  - a Dirichlet condition on velocity (sliding wall with no-slip condition)
  - a Dirichlet condition on the first scalar.

  \snippet cs_user_boundary_conditions-advanced.c example_1

  \section advanced_ex_2 Example 2

  Example of specific boundary conditions fully defined by the user,
  with no definition of a specific type.

  We prescribe at zone 'surf_h' a homogeneous Neumann condition for
  all variables.

  \snippet cs_user_boundary_conditions-advanced.c example_2

  \section advanced_ex_3 Example 3

  Example of wall boundary condition with automatic continuous switch
  between rough and smooth.

  \snippet cs_user_boundary_conditions-advanced.c example_3
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page atmospheric_examples Atmospheric examples

  \section advanced_loc_var_atm Local variables to be added for the Fortran examples

  \snippet cs_user_boundary_conditions-atmo.f90 loc_var_dec

  \section base_init_atm Initialization and finalization

  Initialization and finalization is similar to that of the base examples

  \section atmospheric_ex_1 Example 1 (Fortran)

  For boundary faces of color 11,
  assign an inlet boundary condition prescribed from the
  meteo profile with automatic choice between inlet/ outlet according to
  the meteo profile.

  \snippet cs_user_boundary_conditions-atmo.f90 example_1

  \section atmospheric_ex_2 Example 2 (Fortran)

  For boundary faces of color 21,
  assign an inlet boundary condition prescribed from the
  meteo profile.

  \snippet cs_user_boundary_conditions-atmo.f90 example_2

  \section atmospheric_ex_3 Example 3

  For boundary faces of zone "inlet_3", assign an inlet boundary condition.
  Here, all other variables prescribed from the meteo profile
  are assumed to be managed by the GUI, except for
  dynamic variables which are prescribed with a rough log law.

  \snippet cs_user_boundary_conditions-atmospheric.c example_3

  \section atmospheric_ex_4 Example 4

  Define a rough wall at boundary faces of zone 'b_5'.

  \snippet cs_user_boundary_conditions-atmospheric.c example_4

*/

/*-----------------------------------------------------------------------------*/
/*!
  \page compressible_examples Compressible examples

  \section advanced_loc_var_ce Local variables to be added

  \snippet cs_user_boundary_conditions-compressible.c loc_var_dec

  \section base_init_ce Initialization and finalization

  Initialization and finalization is similar to that of the base examples

  \section compressible_ex_1 Example 1

  Example of input / output for which everything is known.

  Without presuming subsonic or supersonic character,
  the user wishes to impose all the flow characteristics.
  A supersonic inlet is a special case.

  If the speed is outgoing, an homogenous Neumann is imposed
  on turbulence and user scalars.

  \snippet cs_user_boundary_conditions-compressible.c example_1

  \section compressible_ex_2 Example 2

  Example supersonic output

  All features are output.
  Internal values are used to calculate the flow edge, they should not be imposed.

  For turbulence and scalar, if RCODCL values are provided,
  they will be used in Dirichlet if the mass flow is incoming,
  otherwise a null flow is imposed (flow outgoing mass or RCODCL informed here).
  Note that for turbulence RCODCL must be defined for all turbulent variables.
  Otherwise a null  flow is applied).

  Example of supersonic outlet

  All characteristics exit.
  Nothing should be prescribed (the internal values are used to the computation
  of boundary fluxes).

  For turbulence and scalars, if we provide here values of`rcodcl`, we prescribe
  them as Dirichlet values if the mass flux is entering. otherwise, we
  prescribe a zero flux (outgoing mass flux or `rcodcl` defined here).
  Note that for turbulence, `rcodcl` should be set for all turbulent variables
  (otherwise, we apply a zero flux).

  \snippet cs_user_boundary_conditions-compressible.c example_2

  \section compressible_ex_3 Example 3

  Subsonic input example with density and velocity.

  Two of three characteristics are incoming: two informations must be provided,
  third is deduced by a scenario of 2-contact and 3-relaxation in the field.
  Here we choose to give (rho, U).

  Example of a subsonic inlet (density, velocity)

  2 characteristcs out ot 3 enter: both informations should be provided
  the third is deducted by a scenario of 2-contact and 3-relaxation
  in the domain.
  Here, whe choose to give (rho, U).

  \snippet cs_user_boundary_conditions-compressible.c example_3

  \section compressible_ex_4 Example 4

  Subsonic outlet example

  1 characteristic out of 3 exits: 1 information must be given
  the 2 others are deduced by a 2-contact and 3-relaxation in the domain.
  Here we choose to definer P.

  Turbulence and user scalars take a zero flux.

  \snippet cs_user_boundary_conditions-compressible.c example_4

  \section compressible_ex_5 Example 5

  Wall example

  \snippet cs_user_boundary_conditions-compressible.c example_5
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page electric_arcs_examples Electric arcs boundary conditions examples

  \section elec_init Initialization and finalization

  Initialization and finalization is similar to that of the base examples

  \section electric_arcs_ex_1 Example 1

  For boundary faces of zone "1" assign an inlet
  and assign a cathode for "electric" variables.

  \snippet cs_user_boundary_conditions-electric_arcs.c example_1

  \section electric_arcs_ex_2 Example 2

  For boundary faces of zone "2" assign an free outlet
  and example of electrode for Joule Effect by direct conduction.

  \snippet cs_user_boundary_conditions-electric_arcs.c example_2

  \section electric_arcs_ex_3 Example 3

   For boundary faces of zone "2" assign a free outlet
   and example of anode for electric arc.

  \snippet cs_user_boundary_conditions-electric_arcs.c example_3

  \section electric_arcs_ex_4 Example 4

  For boundary faces of zone "2" assign a wall
  and example of potential vector Dirichlet condition

  \snippet cs_user_boundary_conditions-electric_arcs.c example_4

  \section electric_arcs_ex_5 Example 5

   For boundary faces of zone "51" assign a wall
   and restriking model for electric arc (anode boundaray condition).

  \snippet cs_user_boundary_conditions-electric_arcs.c example_5

  \section electric_arcs_ex_6 Example 6

  For boundary faces of zone "4" assign a symmetry.

  \snippet cs_user_boundary_conditions-electric_arcs.c example_6
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page electric_arcs_ieljou_3_or_4_examples Electric arcs Joule examples

  \section elec2_loc_var Local variables to be added

  \snippet cs_user_boundary_conditions-electric_arcs_ieljou_3_or_4.c loc_var_dec

  \section elec2_init Initialization and finalization

  Initialization and finalization is similar to that of the base examples

  \snippet cs_user_boundary_conditions-electric_arcs_ieljou_3_or_4.c init

  \section elec2_step1 Computation of intensity (A/m2) for each electrode

  Pre initialization

  \snippet cs_user_boundary_conditions-electric_arcs_ieljou_3_or_4.c pre_init

  \snippet cs_user_boundary_conditions-electric_arcs_ieljou_3_or_4.c step_1

  \section elec2_step2 Definition of Voltage on each termin of transformers

  Computation of Intensity on each termin of transformers:
  \snippet cs_user_boundary_conditions-electric_arcs_ieljou_3_or_4.c step_2_1

  RVoltage on each termin:
  \snippet cs_user_boundary_conditions-electric_arcs_ieljou_3_or_4.c step_2_2

  Total intensity for a transformer (zero valued WHEN Offset established):
  \snippet cs_user_boundary_conditions-electric_arcs_ieljou_3_or_4.c step_2_3

  Take in account of Offset:
  \snippet cs_user_boundary_conditions-electric_arcs_ieljou_3_or_4.c step_2_4

  Take in account of Boundary Conditions
  \snippet cs_user_boundary_conditions-electric_arcs_ieljou_3_or_4.c step_2_5

  \section elec2_step3 Finalization step

  Test, if not any reference transformer a piece of wall may be at ground:
  \snippet cs_user_boundary_conditions-electric_arcs_ieljou_3_or_4.c step_3
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page fuel_examples Fuel examples

  \section advanced_loc_var_fe Local variables to be added

  \snippet cs_user_boundary_conditions-fuel.f90 loc_var_dec

  \section base_init_fe Initialization and finalization

  Initialization and finalization is similar to that of the base examples

  \section fuel_ex_1 Example 1

  The 12 color is a pure air inlet

  \snippet cs_user_boundary_conditions-fuel.f90 example_1

  \section fuel_ex_2 Example 2

  Inlet of both primary Air and Fuel

  \snippet cs_user_boundary_conditions-fuel.f90 example_2

  \section fuel_ex_3 Example 3

  Color 15 is a wall

  \snippet cs_user_boundary_conditions-fuel.f90 example_3

  \section fuel_ex_4 Example 4

  Color 19 is an outlet

  \snippet cs_user_boundary_conditions-fuel.f90 example_4

  \section fuel_ex_5 Example 5

  14 and 4 are symmetry

  \snippet cs_user_boundary_conditions-fuel.f90 example_5
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page gas_3ptchem_examples Gas 3 PTCHEM example

  The following sections illustrate subsets of a same example,
  combining high-level definitions (which are preferred), and lower-level
  setings where necessary.

  This is assumed to be combined with the GUI or settings not specific
  to gas combustion, so wall and symmetry conditions are not shown here.

  \section def_setup Definitions for the setup stage

  Using a fixed mass-flow rate, the main inlet conditions can be defined
  in \ref cs_user_boundary_conditions_setup, as follows for a zone
  named "inlet":

  \snippet cs_user_boundary_conditions-gas_3ptchem.c setup_inlet

  Note that we have used a notebook variable here, allowing parametrization
  of the computation, but the mass flow should be fixed. For a variable
  mass flow rate, use \ref cs_boundary_conditions_open_set_mass_flow_rate_by_func
  instead.

  \section def_compute Definitions for the compute stage

  Not all definitions can yet be handled at the setup stage, so
  additional settings are needed in \ref cs_user_boundary_conditions.

  \subsection advanced_loc_var_ptchem Local variables to be added

  The following aliases (for conciseness of the downstream code)
  and initializations are used here:

  \snippet cs_user_boundary_conditions-gas_3ptchem.c loc_var_dec

  \subsection advanced_inlet_ptchem Inlet definitions

  Based on the inlet defined at the setup stage, the following additional
  settings can be used. Note that the inlet temperature is global to
  the module, but matches an inlet, so we choose to (re)set it here.
  These settings will be handled in the setup stage in a future version.

  \snippet cs_user_boundary_conditions-gas_3ptchem.c inlet

  \subsection advanced_open_bc_ptchem Open boundary definition

  Since it is not yet possible to handle open boundary conditions
  with backflow conditions with the high level API (i.e. at the
  setup stage), the following example illustrates have this can
  be managed, on an example zone named "open":

  \snippet cs_user_boundary_conditions-gas_3ptchem.c open
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page gas_ebu_examples Gas EBU examples

  \section advanced_loc_var_ebu Local variables to be added

  \snippet cs_user_boundary_conditions-gas_ebu.f90 loc_var_dec

  \section base_init_ebu Initialization and finalization

  Initialization and finalization is similar to that of the base examples

  \section gas_ebu_ex_1 Example 1

  Definition of a burned gas inlet (pilot flame) for each face of color 11

  \snippet cs_user_boundary_conditions-gas_ebu.f90 example_1

  \section gas_ebu_ex_2 Example 2

  Definition of an unburned gas inlet for each face of color 12

  \snippet cs_user_boundary_conditions-gas_ebu.f90 example_2
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page gas_libby_williams_examples Gas Libby-Williams examples

  \section advanced_loc_var_lw Local variables to be added

  \snippet cs_user_boundary_conditions-gas_libby_williams.f90 loc_var_dec

  \section base_init_lw Initialization and finalization

  Initialization and finalization is similar to that of the base examples

  \section gas_libby_williams_ex_1 Example 1

  Definition of a burned gas inlet (pilot flame) for each face of color 11

  \snippet cs_user_boundary_conditions-gas_libby_williams.f90 example_1

  \section gas_libby_williams_ex_2 Example 2

  Definition of an unburned gas inlet for each face of color 12

  \snippet cs_user_boundary_conditions-gas_libby_williams.f90 example_2
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page pulverized_coal_bcs Pulverized coal

  The examples provided here are only concern inlet boundary conditions.
  Other boundary condition types are not specific to the pulverized coal
  model, so generic examples apply (and as usual, the GUI is recommended).

  Note that turbulence variables BC's are usually computed automatically,
  based on definitions using
  \ref cs_boundary_conditions_inlet_set_turbulence_hyd_diam
  or \ref cs_boundary_conditions_inlet_set_turbulence_internsity.

  This following examples show how user code con be defined in
  \ref cs_user_boundary_conditions_setup, so as to define inlet properties
  using the high-level for non-coal-specific variables, and access
  the coal inlet structure definition to set the required properties.

  \section pulverized_coal_ex_1 Example 1

  Secondary or tertiary air inlet, for zone 'inlet', using either
  the base pulverized coal model or the
  pulverized coal with moisture model (with Lagrangian particle tracking).

  \snippet cs_user_boundary_conditions-pulverized_coal.c example_1

  \section pulverized_coal_ex_2 Example 2

  Primary air and coal inlet, for zone 'primary_inlet'.

  \snippet cs_user_boundary_conditions-pulverized_coal.c example_2
*/

/*-----------------------------------------------------------------------------*/
/*!
  \page medcoupling_remapper_2d Boundary conditions definition by remapping with medcoupling

  Local definitions

  \snippet cs_user_boundary_conditions-medcoupling_remapper_2d.c loc_var_def

  Initialization of some variables

  \snippet cs_user_boundary_conditions-medcoupling_remapper_2d.c init

  Create a medcoupling remapper

  \snippet cs_user_boundary_conditions-medcoupling_remapper_2d.c remapper

  Translate or rotate med data if needed

  \snippet cs_user_boundary_conditions-medcoupling_remapper_2d.c trans_rota

  We retrieve an array containing the interpolated values.

  \snippet cs_user_boundary_conditions-medcoupling_remapper_2d.c copy_values

  We prescribe for the inlet a Dirichlet condition on the scalar "scalar1":

  \snippet cs_user_boundary_conditions-medcoupling_remapper_2d.c dirichlet_condition

*/
